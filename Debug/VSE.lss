
VSE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00000530  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800106  00800106  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b90  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4b  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  00002f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa9  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001080  00000000  00000000  000045dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000565d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 30       	cpi	r26, 0x06	; 6
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e0       	ldi	r26, 0x06	; 6
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 30       	cpi	r26, 0x07	; 7
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8a:	0c 94 96 02 	jmp	0x52c	; 0x52c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinDirection>:
	switch(u8_port)
	{
		case GPIOA: PORTA_DATA ^= u8_pins;break;
		case GPIOB: PORTB_DATA ^= u8_pins;break;
		case GPIOC: PORTC_DATA ^= u8_pins;break;
		case GPIOD: PORTD_DATA ^= u8_pins;break;
  92:	41 11       	cpse	r20, r1
  94:	1c c0       	rjmp	.+56     	; 0xce <gpioPinDirection+0x3c>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	59 f0       	breq	.+22     	; 0xb0 <gpioPinDirection+0x1e>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <gpioPinDirection+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	69 f0       	breq	.+26     	; 0xba <gpioPinDirection+0x28>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	81 f0       	breq	.+32     	; 0xc4 <gpioPinDirection+0x32>
  a4:	08 95       	ret
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	60 95       	com	r22
  aa:	68 23       	and	r22, r24
  ac:	6a bb       	out	0x1a, r22	; 26
  ae:	08 95       	ret
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	60 95       	com	r22
  b4:	68 23       	and	r22, r24
  b6:	67 bb       	out	0x17, r22	; 23
  b8:	08 95       	ret
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	60 95       	com	r22
  be:	68 23       	and	r22, r24
  c0:	64 bb       	out	0x14, r22	; 20
  c2:	08 95       	ret
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	60 95       	com	r22
  c8:	68 23       	and	r22, r24
  ca:	61 bb       	out	0x11, r22	; 17
  cc:	08 95       	ret
  ce:	4f 3f       	cpi	r20, 0xFF	; 255
  d0:	b9 f4       	brne	.+46     	; 0x100 <gpioPinDirection+0x6e>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	51 f0       	breq	.+20     	; 0xea <gpioPinDirection+0x58>
  d6:	28 f0       	brcs	.+10     	; 0xe2 <gpioPinDirection+0x50>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	59 f0       	breq	.+22     	; 0xf2 <gpioPinDirection+0x60>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	69 f0       	breq	.+26     	; 0xfa <gpioPinDirection+0x68>
  e0:	08 95       	ret
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	68 2b       	or	r22, r24
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	68 2b       	or	r22, r24
  ee:	67 bb       	out	0x17, r22	; 23
  f0:	08 95       	ret
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	68 2b       	or	r22, r24
  f6:	64 bb       	out	0x14, r22	; 20
  f8:	08 95       	ret
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	68 2b       	or	r22, r24
  fe:	61 bb       	out	0x11, r22	; 17
 100:	08 95       	ret

00000102 <gpioPinWrite>:
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	71 f0       	breq	.+28     	; 0x122 <gpioPinWrite+0x20>
 106:	28 f0       	brcs	.+10     	; 0x112 <gpioPinWrite+0x10>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	99 f0       	breq	.+38     	; 0x132 <gpioPinWrite+0x30>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	c9 f0       	breq	.+50     	; 0x142 <gpioPinWrite+0x40>
 110:	08 95       	ret
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	96 2f       	mov	r25, r22
 116:	90 95       	com	r25
 118:	89 23       	and	r24, r25
 11a:	46 23       	and	r20, r22
 11c:	48 2b       	or	r20, r24
 11e:	4b bb       	out	0x1b, r20	; 27
 120:	08 95       	ret
 122:	88 b3       	in	r24, 0x18	; 24
 124:	96 2f       	mov	r25, r22
 126:	90 95       	com	r25
 128:	89 23       	and	r24, r25
 12a:	46 23       	and	r20, r22
 12c:	48 2b       	or	r20, r24
 12e:	48 bb       	out	0x18, r20	; 24
 130:	08 95       	ret
 132:	85 b3       	in	r24, 0x15	; 21
 134:	96 2f       	mov	r25, r22
 136:	90 95       	com	r25
 138:	89 23       	and	r24, r25
 13a:	46 23       	and	r20, r22
 13c:	48 2b       	or	r20, r24
 13e:	45 bb       	out	0x15, r20	; 21
 140:	08 95       	ret
 142:	82 b3       	in	r24, 0x12	; 18
 144:	96 2f       	mov	r25, r22
 146:	90 95       	com	r25
 148:	89 23       	and	r24, r25
 14a:	46 23       	and	r20, r22
 14c:	48 2b       	or	r20, r24
 14e:	42 bb       	out	0x12, r20	; 18
 150:	08 95       	ret

00000152 <gpioPinRead>:
/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
	switch(u8_port)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	49 f0       	breq	.+18     	; 0x168 <gpioPinRead+0x16>
 156:	28 f0       	brcs	.+10     	; 0x162 <gpioPinRead+0x10>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	49 f0       	breq	.+18     	; 0x16e <gpioPinRead+0x1c>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	51 f0       	breq	.+20     	; 0x174 <gpioPinRead+0x22>
 160:	0c c0       	rjmp	.+24     	; 0x17a <gpioPinRead+0x28>
	{
		case GPIOA: u8_pin_value = (PORTA_PIN & u8_pin);break;
 162:	89 b3       	in	r24, 0x19	; 25
 164:	68 23       	and	r22, r24
 166:	0a c0       	rjmp	.+20     	; 0x17c <gpioPinRead+0x2a>
		case GPIOB: u8_pin_value = (PORTB_PIN & u8_pin);break;
 168:	86 b3       	in	r24, 0x16	; 22
 16a:	68 23       	and	r22, r24
 16c:	07 c0       	rjmp	.+14     	; 0x17c <gpioPinRead+0x2a>
		case GPIOC: u8_pin_value = (PORTC_PIN & u8_pin);break;
 16e:	83 b3       	in	r24, 0x13	; 19
 170:	68 23       	and	r22, r24
 172:	04 c0       	rjmp	.+8      	; 0x17c <gpioPinRead+0x2a>
		case GPIOD: u8_pin_value = (PORTD_PIN & u8_pin);break;
 174:	80 b3       	in	r24, 0x10	; 16
 176:	68 23       	and	r22, r24
 178:	01 c0       	rjmp	.+2      	; 0x17c <gpioPinRead+0x2a>

/* When you anding PORTx PIN value withe the required Pin to read it returns either 0 or pin number*/
/* we consider 0 as Low and any other value as High*/
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t u8_pin_value=-1;
 17a:	6f ef       	ldi	r22, 0xFF	; 255
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	61 11       	cpse	r22, r1
 180:	01 c0       	rjmp	.+2      	; 0x184 <gpioPinRead+0x32>
 182:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(u8_pin_value == 0)
		return LOW;
	else
		return HIGH;
}
 184:	81 95       	neg	r24
 186:	08 95       	ret

00000188 <Led_On>:

/* This function is implemented to choose which led we want to turn on by sending its number*/
/* Based on gpioPinwrite function with HIGH value*/
void Led_On(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	61 f0       	breq	.+24     	; 0x1a4 <Led_On+0x1c>
 18c:	28 f0       	brcs	.+10     	; 0x198 <Led_On+0x10>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	79 f0       	breq	.+30     	; 0x1b0 <Led_On+0x28>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	99 f0       	breq	.+38     	; 0x1bc <Led_On+0x34>
 196:	08 95       	ret
	{
		case LED_0:
		{
			 gpioPinWrite(LED_0_GPIO,LED_0_BIT, HIGH);
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	60 e1       	ldi	r22, 0x10	; 16
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1a2:	08 95       	ret
		}
		case LED_1:
		{
			 gpioPinWrite(LED_1_GPIO,LED_1_BIT, HIGH);
 1a4:	4f ef       	ldi	r20, 0xFF	; 255
 1a6:	60 e2       	ldi	r22, 0x20	; 32
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1ae:	08 95       	ret
		}
		case LED_2:
		{
			 gpioPinWrite(LED_2_GPIO,LED_2_BIT, HIGH);
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	60 e4       	ldi	r22, 0x40	; 64
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1ba:	08 95       	ret
		}
		case LED_3:
		{
			 gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 1bc:	4f ef       	ldi	r20, 0xFF	; 255
 1be:	60 e8       	ldi	r22, 0x80	; 128
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
 1c6:	08 95       	ret

000001c8 <Led_Off>:

/* This function is implemented to choose which led we want to turn off by sending its number*/
/* Based on gpioPinwrite function with LAW value*/
void Led_Off(En_LedNumber_t en_led_id)
{
	switch (en_led_id)
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	61 f0       	breq	.+24     	; 0x1e4 <Led_Off+0x1c>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <Led_Off+0x10>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <Led_Off+0x28>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	99 f0       	breq	.+38     	; 0x1fc <Led_Off+0x34>
 1d6:	08 95       	ret
	{
		case LED_0:
		{
			gpioPinWrite(LED_0_GPIO,LED_0_BIT, LOW);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1e2:	08 95       	ret
		}
		case LED_1:
		{
			gpioPinWrite(LED_1_GPIO,LED_1_BIT, LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 e2       	ldi	r22, 0x20	; 32
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1ee:	08 95       	ret
		}
		case LED_2:
		{
			gpioPinWrite(LED_2_GPIO,LED_2_BIT, LOW);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 e4       	ldi	r22, 0x40	; 64
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
			break;
 1fa:	08 95       	ret
		}
		case LED_3:
		{
			gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	60 e8       	ldi	r22, 0x80	; 128
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 81 00 	call	0x102	; 0x102 <gpioPinWrite>
 206:	08 95       	ret

00000208 <main>:
#include "SPI.h"
#define F_CPU 16000000UL
#include <util/delay.h>
volatile uint8_t Speed;
int main(void)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	28 97       	sbiw	r28, 0x08	; 8
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
	 sei();
 21c:	78 94       	sei
	 uint8_t rec_data=0;
	 uint8_t cmd=0;
	 uint8_t BTN_Increase=-1;
	 uint8_t BTN_Decrease=-1;

	 pushButtonInit(BTN_0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 95 01 	call	0x32a	; 0x32a <pushButtonInit>
	 pushButtonInit(BTN_1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 95 01 	call	0x32a	; 0x32a <pushButtonInit>
	 /*UART Initialization*/
	 USART_CFG_t UART1_CFG;
	 UART1_CFG.CHAR_DATA_NUMBER = USART_8BIT_DATA;
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	8b 83       	std	Y+3, r24	; 0x03
	 UART1_CFG.STOP_BIT_SELECT = USART_1_STOP_BIT;
 22e:	1e 82       	std	Y+6, r1	; 0x06
	 UART1_CFG.USART_BAUD_RATE_SELECT = USART_9600_BAUD_RATE;
 230:	87 e6       	ldi	r24, 0x67	; 103
 232:	88 87       	std	Y+8, r24	; 0x08
	 UART1_CFG.USART_CLOCK_POLARITY = USART_RISING_TRANSMIT;
 234:	1d 82       	std	Y+5, r1	; 0x05
	 UART1_CFG.USART_MODE = USART_ASYNC_MODE;
 236:	19 82       	std	Y+1, r1	; 0x01
	 UART1_CFG.USART_PARITY = USART_PARITY_DIS;
 238:	1c 82       	std	Y+4, r1	; 0x04
	 UART1_CFG.USART_RX_TX = USART_RX_TX_Enable;
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	8a 83       	std	Y+2, r24	; 0x02
	 UART1_CFG.USART_INTERRUPTS = USART_Interrupt_Disabl;
 23e:	1f 82       	std	Y+7, r1	; 0x07
    USART_Init2(&UART1_CFG);
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 27 02 	call	0x44e	; 0x44e <USART_Init2>
	 /*SPI Initialization*/
	 SPI_Init(SPI_Master, SPI_CLK_F_64 , SPI_Mode0,LSB_First ,SPI_Interrupts_Disabled);
 248:	00 e0       	ldi	r16, 0x00	; 0
 24a:	20 e2       	ldi	r18, 0x20	; 32
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	80 e5       	ldi	r24, 0x50	; 80
 252:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_Init>
	 /*Instructions used only once*/
	 UART_Send_String(" Welcome... \n");
 256:	81 e6       	ldi	r24, 0x61	; 97
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
	 UART_Send_String(" Please Enter the Initial Speed\n");
 25e:	8f e6       	ldi	r24, 0x6F	; 111
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
	 Speed=USART_Receive_POLLING();
 266:	0e 94 47 02 	call	0x48e	; 0x48e <USART_Receive_POLLING>
 26a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    UART_Send_String("You have entered \n");
 26e:	80 e9       	ldi	r24, 0x90	; 144
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
	 USART_SEND_POLLING(Speed);
 276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 27a:	0e 94 43 02 	call	0x486	; 0x486 <USART_SEND_POLLING>
	 SPI_Write(Speed);
 27e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 282:	0e 94 23 02 	call	0x446	; 0x446 <SPI_Write>
	 SPI_Write(Speed);
 286:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 28a:	0e 94 23 02 	call	0x446	; 0x446 <SPI_Write>
	 SPI_Write(Speed);
 28e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 292:	0e 94 23 02 	call	0x446	; 0x446 <SPI_Write>
		  if ( cmd=='-')
		  {
			  Speed--;
			  if(Speed<'0')
			  {
					Speed='0';
 296:	10 e3       	ldi	r17, 0x30	; 48
	 SPI_Write(Speed);
	 SPI_Write(Speed);
	 
    while (1) 
    {
		  BTN_Increase=pushButtonGetStatus(BTN_0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 b5 01 	call	0x36a	; 0x36a <pushButtonGetStatus>
		  BTN_Decrease=pushButtonGetStatus(BTN_1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 b5 01 	call	0x36a	; 0x36a <pushButtonGetStatus>
		  cmd=USART_Receive_POLLING();
 2a4:	0e 94 47 02 	call	0x48e	; 0x48e <USART_Receive_POLLING>
		//  if ( BTN_Increase==Pressed)
		  if ( cmd=='+')
 2a8:	8b 32       	cpi	r24, 0x2B	; 43
 2aa:	d9 f4       	brne	.+54     	; 0x2e2 <main+0xda>
		  {
				 Speed++;
 2ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
				 
				 UART_Send_String(" Speed Incremented New Speed = \n");
 2b6:	83 ea       	ldi	r24, 0xA3	; 163
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
				 USART_SEND_POLLING(Speed);
 2be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2c2:	0e 94 43 02 	call	0x486	; 0x486 <USART_SEND_POLLING>
				 SPI_Write(Speed);
 2c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ca:	0e 94 23 02 	call	0x446	; 0x446 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	89 e6       	ldi	r24, 0x69	; 105
 2d2:	98 e1       	ldi	r25, 0x18	; 24
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0xcc>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xd6>
 2de:	00 00       	nop
 2e0:	db cf       	rjmp	.-74     	; 0x298 <main+0x90>
				_delay_ms(500);
		  }
		 // if ( BTN_Decrease==Pressed)
		  if ( cmd=='-')
 2e2:	8d 32       	cpi	r24, 0x2D	; 45
 2e4:	c9 f6       	brne	.-78     	; 0x298 <main+0x90>
		  {
			  Speed--;
 2e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			  if(Speed<'0')
 2f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2f4:	80 33       	cpi	r24, 0x30	; 48
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <main+0xf6>
			  {
					Speed='0';
 2f8:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <__data_end>
 2fc:	0c c0       	rjmp	.+24     	; 0x316 <main+0x10e>
	
			  }
			  else
			  {
					 UART_Send_String(" Speed Decremented New Speed = \n");
 2fe:	84 ec       	ldi	r24, 0xC4	; 196
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
					 USART_SEND_POLLING( Speed);
 306:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 30a:	0e 94 43 02 	call	0x486	; 0x486 <USART_SEND_POLLING>
					 SPI_Write(Speed);
 30e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 312:	0e 94 23 02 	call	0x446	; 0x446 <SPI_Write>
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	89 e6       	ldi	r24, 0x69	; 105
 31a:	98 e1       	ldi	r25, 0x18	; 24
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x114>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x11e>
 326:	00 00       	nop
 328:	b7 cf       	rjmp	.-146    	; 0x298 <main+0x90>

0000032a <pushButtonInit>:
 */ 
#include "pushButton.h"

void pushButtonInit(En_buttonId_t en_butotn_id)
{
   switch(en_butotn_id)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	61 f0       	breq	.+24     	; 0x346 <pushButtonInit+0x1c>
 32e:	28 f0       	brcs	.+10     	; 0x33a <pushButtonInit+0x10>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	79 f0       	breq	.+30     	; 0x352 <pushButtonInit+0x28>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	99 f0       	breq	.+38     	; 0x35e <pushButtonInit+0x34>
 338:	08 95       	ret
   {
      case BTN_0:
                   gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	60 e1       	ldi	r22, 0x10	; 16
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 344:	08 95       	ret
      case BTN_1:
                   gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 350:	08 95       	ret
      case BTN_2:
                   gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	64 e0       	ldi	r22, 0x04	; 4
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
                   break;
 35c:	08 95       	ret
      case BTN_3:
                   gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	68 e0       	ldi	r22, 0x08	; 8
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 368:	08 95       	ret

0000036a <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
   En_buttonStatus_t ret = 0x00;
   switch(en_butotn_id)
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	69 f0       	breq	.+26     	; 0x388 <pushButtonGetStatus+0x1e>
 36e:	28 f0       	brcs	.+10     	; 0x37a <pushButtonGetStatus+0x10>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	89 f0       	breq	.+34     	; 0x396 <pushButtonGetStatus+0x2c>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	b1 f0       	breq	.+44     	; 0x3a4 <pushButtonGetStatus+0x3a>
 378:	1c c0       	rjmp	.+56     	; 0x3b2 <pushButtonGetStatus+0x48>
   {
       case BTN_0:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_0_GPIO, BTN_0_BIT)? Pressed:Released;
 37a:	60 e1       	ldi	r22, 0x10	; 16
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 a9 00 	call	0x152	; 0x152 <gpioPinRead>
 382:	81 11       	cpse	r24, r1
 384:	18 c0       	rjmp	.+48     	; 0x3b6 <pushButtonGetStatus+0x4c>
 386:	08 95       	ret
                   break;
       case BTN_1:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_1_GPIO, BTN_1_BIT)? Pressed:Released;
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 a9 00 	call	0x152	; 0x152 <gpioPinRead>
 390:	81 11       	cpse	r24, r1
 392:	13 c0       	rjmp	.+38     	; 0x3ba <pushButtonGetStatus+0x50>
 394:	08 95       	ret
                   break;
       case BTN_2:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_2_GPIO, BTN_2_BIT)? Pressed:Released;
 396:	64 e0       	ldi	r22, 0x04	; 4
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 a9 00 	call	0x152	; 0x152 <gpioPinRead>
 39e:	81 11       	cpse	r24, r1
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <pushButtonGetStatus+0x54>
 3a2:	08 95       	ret
                   break;
       case BTN_3:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_3_GPIO, BTN_3_BIT)? Pressed:Released;
 3a4:	68 e0       	ldi	r22, 0x08	; 8
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 a9 00 	call	0x152	; 0x152 <gpioPinRead>
 3ac:	81 11       	cpse	r24, r1
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <pushButtonGetStatus+0x58>
 3b0:	08 95       	ret
   }
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
   En_buttonStatus_t ret = 0x00;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
   switch(en_butotn_id)
   {
       case BTN_0:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_0_GPIO, BTN_0_BIT)? Pressed:Released;
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	08 95       	ret
                   break;
       case BTN_1:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_1_GPIO, BTN_1_BIT)? Pressed:Released;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	08 95       	ret
                   break;
       case BTN_2:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_2_GPIO, BTN_2_BIT)? Pressed:Released;
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	08 95       	ret
                   break;
       case BTN_3:
	               //softwareDelayMs(15);
                   ret = gpioPinRead(BTN_3_GPIO, BTN_3_BIT)? Pressed:Released;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
                   break;
       default:
                   break;
   }
   return ret;
 3c4:	08 95       	ret

000003c6 <SPI_Init>:
#include "SPI.h"


void SPI_Init(En_spiMode_t a_spiMode, En_spiClkRate_t a_spiCLK, En_spiModeNumber_t a_spiModeNum, 
			  En_spiDataOrder_t a_spiDataOrder, En_spiInterrupts_t a_spiInterrupts)
{
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	c8 2f       	mov	r28, r24
 3d2:	d6 2f       	mov	r29, r22
 3d4:	f4 2e       	mov	r15, r20
 3d6:	12 2f       	mov	r17, r18
	SPCR = 0x00;
 3d8:	1d b8       	out	0x0d, r1	; 13
	switch(a_spiMode)
 3da:	80 34       	cpi	r24, 0x40	; 64
 3dc:	91 f0       	breq	.+36     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3de:	80 35       	cpi	r24, 0x50	; 80
 3e0:	21 f5       	brne	.+72     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		case SPI_Master:
				gpioPinDirection(MISO_GPIO, MISO_BIT, INPUT);
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	60 e4       	ldi	r22, 0x40	; 64
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(MOSI_GPIO, MOSI_BIT, OUTPUT);
 3ec:	4f ef       	ldi	r20, 0xFF	; 255
 3ee:	60 e2       	ldi	r22, 0x20	; 32
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SCK_GPIO, SCK_BIT, OUTPUT);
 3f6:	4f ef       	ldi	r20, 0xFF	; 255
 3f8:	60 e8       	ldi	r22, 0x80	; 128
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				break;
 400:	14 c0       	rjmp	.+40     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		case SPI_Slave:
				gpioPinDirection(MISO_GPIO, MISO_BIT, OUTPUT);
 402:	4f ef       	ldi	r20, 0xFF	; 255
 404:	60 e4       	ldi	r22, 0x40	; 64
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(MOSI_GPIO, MOSI_BIT, INPUT);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	60 e2       	ldi	r22, 0x20	; 32
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SCK_GPIO, SCK_BIT, INPUT);
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	60 e8       	ldi	r22, 0x80	; 128
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				gpioPinDirection(SS_GPIO, SS_BIT, INPUT);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	60 e1       	ldi	r22, 0x10	; 16
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
				break;
		default:
				break;
	}	
	SPCR =  (a_spiMode | a_spiCLK | a_spiDataOrder | a_spiModeNum | a_spiInterrupts);
 42a:	0f 29       	or	r16, r15
 42c:	10 2b       	or	r17, r16
 42e:	d1 2b       	or	r29, r17
 430:	cd 2b       	or	r28, r29
 432:	cd b9       	out	0x0d, r28	; 13
	SREG |= (0x80);
 434:	8f b7       	in	r24, 0x3f	; 63
 436:	80 68       	ori	r24, 0x80	; 128
 438:	8f bf       	out	0x3f, r24	; 63
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	08 95       	ret

00000446 <SPI_Write>:

void SPI_Write(uint8_t data)
{
	// Write The Data To SPI Buffer
	SPDR = data;
 446:	8f b9       	out	0x0f, r24	; 15
	// Wait Until Transmission Completion
	while(!(SPSR & (1<<7)));
 448:	77 9b       	sbis	0x0e, 7	; 14
 44a:	fe cf       	rjmp	.-4      	; 0x448 <SPI_Write+0x2>
 44c:	08 95       	ret

0000044e <USART_Init2>:
uint8_t USART_Receive_NO_POLLING(void)
{
	
	return UDR;
	
}
 44e:	fc 01       	movw	r30, r24
 450:	10 bc       	out	0x20, r1	; 32
 452:	1a b8       	out	0x0a, r1	; 10
 454:	9a b1       	in	r25, 0x0a	; 10
 456:	81 81       	ldd	r24, Z+1	; 0x01
 458:	89 2b       	or	r24, r25
 45a:	8a b9       	out	0x0a, r24	; 10
 45c:	9a b1       	in	r25, 0x0a	; 10
 45e:	86 81       	ldd	r24, Z+6	; 0x06
 460:	89 2b       	or	r24, r25
 462:	8a b9       	out	0x0a, r24	; 10
 464:	87 81       	ldd	r24, Z+7	; 0x07
 466:	89 b9       	out	0x09, r24	; 9
 468:	10 bc       	out	0x20, r1	; 32
 46a:	20 b5       	in	r18, 0x20	; 32
 46c:	80 81       	ld	r24, Z
 46e:	94 81       	ldd	r25, Z+4	; 0x04
 470:	89 2b       	or	r24, r25
 472:	80 68       	ori	r24, 0x80	; 128
 474:	92 81       	ldd	r25, Z+2	; 0x02
 476:	89 2b       	or	r24, r25
 478:	95 81       	ldd	r25, Z+5	; 0x05
 47a:	89 2b       	or	r24, r25
 47c:	93 81       	ldd	r25, Z+3	; 0x03
 47e:	89 2b       	or	r24, r25
 480:	82 2b       	or	r24, r18
 482:	80 bd       	out	0x20, r24	; 32
 484:	08 95       	ret

00000486 <USART_SEND_POLLING>:
 486:	5d 9b       	sbis	0x0b, 5	; 11
 488:	fe cf       	rjmp	.-4      	; 0x486 <USART_SEND_POLLING>
 48a:	8c b9       	out	0x0c, r24	; 12
 48c:	08 95       	ret

0000048e <USART_Receive_POLLING>:
 48e:	5f 9b       	sbis	0x0b, 7	; 11
 490:	fe cf       	rjmp	.-4      	; 0x48e <USART_Receive_POLLING>
 492:	8c b1       	in	r24, 0x0c	; 12
 494:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <U_rec_data>
 498:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <U_rec_data>
 49c:	08 95       	ret

0000049e <UART_Send_String>:
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ec 01       	movw	r28, r24
 4a4:	88 81       	ld	r24, Y
 4a6:	88 23       	and	r24, r24
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <UART_Send_String+0x18>
 4aa:	21 96       	adiw	r28, 0x01	; 1
 4ac:	0e 94 43 02 	call	0x486	; 0x486 <USART_SEND_POLLING>
 4b0:	89 91       	ld	r24, Y+
 4b2:	81 11       	cpse	r24, r1
 4b4:	fb cf       	rjmp	.-10     	; 0x4ac <UART_Send_String+0xe>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <__vector_13>:
ISR(USART_RXC_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
}

uint8_t USART_Receive_NO_POLLING(void)
{
	
	return UDR;
 4de:	8c b1       	in	r24, 0x0c	; 12
	
}
ISR(USART_RXC_vect)
{
	U_rec_data= USART_Receive_NO_POLLING();
 4e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <U_rec_data>
	if(U_rec_data=='o')
 4e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <U_rec_data>
 4e8:	8f 36       	cpi	r24, 0x6F	; 111
 4ea:	41 f4       	brne	.+16     	; 0x4fc <__vector_13+0x40>
	{
		Led_On(LED_0);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 c4 00 	call	0x188	; 0x188 <Led_On>
		UART_Send_String(" LED IS ON :D \n");
 4f2:	85 ee       	ldi	r24, 0xE5	; 229
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__vector_13+0x4e>
	}
	else
	{
		Led_Off(LED_0);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Led_Off>
		UART_Send_String(" LED IS OFF :( \n");
 502:	85 ef       	ldi	r24, 0xF5	; 245
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_Send_String>
	}
	 
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
